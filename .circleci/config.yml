version: 2.1

orbs:
  python: circleci/python@1.5.0
  codecov: codecov/codecov@3.3.0

executors:
  python-executor:
    docker:
      - image: cimg/python:3.10.13

commands:
  prepare-virtualenv:
    description: "Create Python virtual environment with caching support"
    steps:
      - restore_cache:
          # To force cache validation, increase the version number N in "venv-vN" below
          key: &venv-cache venv-v3-{{ checksum "pyproject.toml" }}
      - run:
          name: Setup Virtual Environment
          command: |
            # Store venv activate script in special CircleCI BASH_ENV
            # variable which will be automatically sourced before
            # new commands
            echo ". $(pwd)/venv/bin/activate" >> "$BASH_ENV"
            if [ ! -d "venv" ]; then
              # venv does not exist: create it
              python -m venv venv
              # Activate venv now it's been created
              source "$BASH_ENV"
              # Install CPU version of PyTorch as CI does not have GPU.
              # (CUDA version runs on CPU OK, but file size is larger,
              # slowing down CI.)
              pip install torch --index-url https://download.pytorch.org/whl/cpu
              # Install remaining dependencies.
              # Note if we ever remove `-e` it'll become necessary to reinstall
              # robust_llm even if a virtual environment already exists, with:
              # pip install --upgrade --force-reinstall --no-deps '.[dev]'
              pip install -e '.[dev]'
            fi

      - save_cache:
          paths:
            - "venv"
          key: *venv-cache

      - run:
          name: print installed packages
          command: pip freeze --all

  store-test-output:
    description: "Store the output of tests."
    steps:
      - store_artifacts:
          path: /tmp/test-reports
          destination: test-reports

      - store_test_results:
          path: /tmp/test-reports

      - store_artifacts:
          path: /tmp/resource-usage
          destination: resource-usage

jobs:
  pytest:
    executor: python-executor
    steps:
      - checkout
      - prepare-virtualenv
      - run:
          name: Show num processes
          command: |
            # See https://discuss.circleci.com/t/environment-variable-set-to-the-number-of-available-cpus/32670/3
            # for explanation of the weird expression below. -- Aaron
            NUM_CPUS=$(($(cat /sys/fs/cgroup/cpu/cpu.shares) / 1024))
            echo ${NUM_CPUS} processes
            # Save environment variable for next step
            echo "export NUM_CPUS=${NUM_CPUS}" >> $BASH_ENV
      - run:
          name: Run tests
          command: |
            pytest --cov=robust_llm \
                   --cov=tests --junitxml=test-reports/junit.xml \
                   --durations=500 -vv -n ${NUM_CPUS} tests/
          environment:
            WANDB_MODE: offline
      - store_artifacts:
          path: test-reports
          destination: test-reports
      - codecov/upload
      - store-test-output

  lint:
    executor: python-executor
    steps:
      - checkout
      - prepare-virtualenv
      - run:
          name: black
          command: |
            black --version
            black . --check
      - run:
          name: isort
          command: |
            isort --version
            isort robust_llm --check --verbose
      - run:
          name: pyright
          command: |
            pyright --version
            pyright
      - run:
          name: mypy
          command: |
            mypy --version
            mypy --follow-imports=silent --show-error-codes --check-untyped-defs robust_llm/ tests/
      - run:
          name: flake8
          command: |
            flake8 --version
            flake8 . -v --exclude venv

workflows:
  version: 2
  tests:
    jobs:
      - pytest
      - lint
